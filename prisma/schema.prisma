// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                      @id @default(autoincrement())
  username                String                   @unique
  email                   String                   @unique
  password                String
  usdtWallet              String                   @unique
  isAdmin                 Boolean                  @default(false)
  scores                  Score[]
  payments                Payment[]
  tournamentRegistrations TournamentRegistration[]
}

model Tournament {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  maxPlayers     Int?
  maxAmount      Float?
  currentAmount  Float     @default(0)
  registrationFee Float    @default(10)
  startDate      DateTime?
  endDate        DateTime?
  duration       Int? // Duration in minutes
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())

  registrations TournamentRegistration[]
  payments      Payment[]
  scores        Score[]
}

model TournamentRegistration {
  id           Int      @id @default(autoincrement())
  userId       Int
  tournamentId Int
  registeredAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([userId, tournamentId])
}

model Payment {
  id           Int      @id @default(autoincrement())
  userId       Int
  tournamentId Int
  txHash       String
  amount       Float
  isActive     Boolean  @default(false) // Admin verifies this
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Score {
  id           Int        @id @default(autoincrement())
  userId       Int
  tournamentId Int?
  value        Int
  mode         String // "free" or "tournament"
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([tournamentId])
}
